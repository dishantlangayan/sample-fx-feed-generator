/**
 * Copyright 2017 Dishant Langayan
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.dishant.demo.fxfeed;

import java.math.BigDecimal;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import com.dishant.demo.fxfeed.model.Quote;
import com.dishant.demo.fxfeed.utils.FxFeedUtils;

/**
 * A cache to store the stock data generated by the {@link FeedGenerator} and
 * used by the {@link FeedPublisher} to publish to Solace.
 * 
 * @author Dishant Langayan
 */
@Configuration
public class FeedCache {
    private Map<String, Quote> cache = new ConcurrentHashMap<String, Quote>();

    /**
     * A map of the current quotes in the cache.
     * 
     * @return
     */
    @Bean
    public Map<String, Quote> getQuotes() {
        return cache;
    }

    /**
     * Adds or updates the new quote in the internal cache. If the sybmol does
     * not exist in the cache, then the quote is added, or else the price,
     * timestamp, UtcTime, and volume fields are updated.
     * <p/>
     * In all cases it will calculate the change & change percent from the open
     * price.
     * 
     * @param symbol
     *            The symbol used as a key in the cache map.
     * @param newQuote
     *            The quote instance to add or update.
     */
    public void addOrUpdateQuote(String symbol, Quote newQuote) {
        Quote quote = cache.get(symbol);
        if (quote != null) {
            // Update fields
            quote.setPrice(newQuote.getPrice());
            quote.setTimestamp(newQuote.getTimestamp());
            quote.setUtcTime(newQuote.getUtcTime());
            quote.setVolume(newQuote.getVolume());
        } else {
            quote = newQuote;
        }

        // Calculate change & chg_percent
        BigDecimal change = FxFeedUtils.calcChange(quote.getOpen(), quote.getPrice());
        BigDecimal chg_percent = FxFeedUtils.calcChangePercentage(quote.getOpen(), change);
        quote.setChange(change);
        quote.setChangePercent(chg_percent);

        // Add to cache
        cache.put(symbol, quote);
    }

    /**
     * To retrieve a single quote from the cache for the given symbol.
     * 
     * @param symbol
     *            The symbol to lookup in the cache.
     * @return The Quote instance for the given symbol. null if there is no
     *         quote for the sybmol.
     */
    public Quote getQuote(String symbol) {
        if (symbol != null) {
            return cache.get(symbol);
        }
        return null;
    }

}
